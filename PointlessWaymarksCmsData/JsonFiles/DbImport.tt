<#@ template language="C#" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using System;
using System.Collections.Generic;
using System.Linq;
using Omu.ValueInjecter;
using PointlessWaymarksCmsData.Models;

namespace PointlessWaymarksCmsData.JsonFiles
{
    public static class DbImport
    {
<#
       foreach (string loopTypeNames in new List<string>{"FileContent", "PhotoContent", "PostContent", "ImageContent", "NoteContent", "LinkStream"})
       {
#>
         public static void <#= loopTypeNames #>ToDb(List<<#= loopTypeNames #>> toImport, IProgress<string> progress)
         {
             progress?.Report("<#= loopTypeNames #> - Starting");

             if (toImport == null || !toImport.Any())
             {
                 progress?.Report("No items to import?");
                 return;
             }

             progress?.Report($"<#= loopTypeNames #> - Working with {toImport.Count} Entries");
        
             var db = Db.Context().Result;
             
             foreach (var loopImportItem in toImport)
             {
                 progress?.Report($"{loopImportItem.Title} - Starting <#= loopTypeNames #>");

                 var existingItems = db.<#= loopTypeNames #>s.Where(x => x.ContentId == loopImportItem.ContentId).ToList();
    
                 if(existingItems.Any()) progress?.Report($"{loopImportItem.Title} - Found {existingItems.Count} to move to historic");
                 
                 foreach (var loopExisting in existingItems)
                 {
                     var newHistoricEntry = new Historic<#= loopTypeNames #>();
                     newHistoricEntry.InjectFrom(loopExisting);
                     newHistoricEntry.Id = 0;
    
                     db.Historic<#= loopTypeNames #>s.Add(newHistoricEntry);
                     db.<#= loopTypeNames #>s.Remove(loopExisting);
                     db.SaveChanges(true);
                 }
    
                 progress?.Report($"{loopImportItem.Title} - Adding <#= loopTypeNames #>");
    
                 db.<#= loopTypeNames #>s.Add(loopImportItem);
    
                 db.SaveChanges(true);

                 progress?.Report($"{loopImportItem.Title} - Imported");
             }

             progress?.Report("<#= loopTypeNames #> - Finished");

         }
<#
       }
#>

<#
       foreach (string loopTypeNames in new List<string>{"HistoricFileContent", "HistoricPhotoContent", "HistoricPostContent", "HistoricImageContent", "HistoricNoteContent", "HistoricLinkStream"})
       {
#>
        public static void <#= loopTypeNames #>ToDb(List<<#= loopTypeNames #>> toImport, IProgress<string> progress)
        {
            progress?.Report("<#= loopTypeNames #> - Starting");

            if (toImport == null || !toImport.Any())
            {
                progress?.Report("No items to import?");
                return;
            }

            progress?.Report($"<#= loopTypeNames #> - Working with {toImport.Count} Entries");

            var db = Db.Context().Result;

            foreach (var loopImportItem in toImport)
            {
                progress?.Report($"{loopImportItem.Title} - Starting <#= loopTypeNames #>");

                loopImportItem.Id = 0;
                
                db.<#= loopTypeNames #>s.Add(loopImportItem);

                db.SaveChanges(true);

                progress?.Report($"{loopImportItem.Title} - Imported");
            }

            progress?.Report("FileContent - Finished");
        }
<#
       }
#>
    }
}